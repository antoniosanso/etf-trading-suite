name: Trading Suite — Unified Daily

on:
  workflow_dispatch:
  schedule:
    - cron: '15 16 * * *'   # 18:15 Europe/Rome (CEST)
    - cron: '15 17 * * *'   # 18:15 Europe/Rome (CET)

permissions:
  contents: write

jobs:
  unified:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: etf-trading-engine

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Gate 18:15 Europe/Rome
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            H=$(TZ=Europe/Rome date +%H:%M)
            if [ "$H" != "18:15" ]; then
              echo "Not 18:15 Europe/Rome, skip"; exit 0
            fi
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r etf-trading-engine/requirements.txt
          pip install yfinance feedparser beautifulsoup4 requests vaderSentiment pandas numpy pyyaml

      - name: Download EOD
        shell: bash
        run: |
          python etf-trading-engine/scripts/download_eod_yf.py \
            --universe ./etf-trading-config/universe.csv \
            --output ./etf-trading-engine/data/eod.csv \
            --start 2018-01-01 --threads 4 --sleep 0.25 --adjusted

      - name: Sanity check EOD
        shell: bash
        run: |
          python etf-trading-engine/scripts/sanity_check.py \
            --data ./etf-trading-engine/data/eod.csv \
            --min_rows 1000 --max_dd_allowed_pct 90

      # <-- niente "if:" con secrets qui: gate in bash
      - name: Publish to datalake (optional)
        env:
          GH_TOKEN: ${{ secrets.DATALAKE_TOKEN }}
        shell: bash
        run: |
          if [ -z "${GH_TOKEN}" ]; then
            echo "DATALAKE_TOKEN assente: skip publish"; exit 0
          fi
          set -e
          rm -rf datalake
          git clone https://github.com/antoniosanso/etf-datalake.git datalake
          cd datalake
          git config user.name "ci-bot"
          git config user.email "ci-bot@users.noreply.github.com"
          mkdir -p latest
          cd ..
          cp etf-trading-engine/data/eod.csv datalake/latest/eod-latest.csv
          echo '{"updated":"'"$(date -u +%FT%TZ)"'","rows":'$(wc -l < etf-trading-engine/data/eod.csv)'}' > datalake/latest/summary.json
          cd datalake && git add latest && git commit -m "Update dataset (from trading-suite)" || true
          git push origin HEAD:main

      - name: News → Sentiment
        shell: bash
        run: |
          python etf-trading-engine/scripts/aggregate_news.py \
            --sources ./etf-trading-config/news_sources.yaml \
            --universe ./etf-trading-config/universe.csv \
            --topics ./etf-trading-config/mappings/etf_topics.csv \
            --outdir ./features

      - name: Build features (regime + fundamentals)
        shell: bash
        run: |
          python etf-trading-engine/scripts/build_features.py \
            --features ./etf-trading-config/features.yaml \
            --universe ./etf-trading-config/universe.csv \
            --outdir ./features
          python etf-trading-engine/scripts/aggregate_fundamentals.py \
            --universe ./etf-trading-config/universe.csv \
            --outdir ./features

      - name: Generate signals
        shell: bash
        run: |
          python etf-trading-engine/scripts/signals.py \
            --config ./etf-trading-config/signals.yaml \
            --data ./etf-trading-engine/data/eod.csv \
            --outdir ./outputs \
            --features_cfg ./etf-trading-config/features.yaml \
            --features_dir ./features

      - name: Operational report
        shell: bash
        run: |
          python etf-trading-engine/scripts/operational_report.py \
            --data ./etf-trading-engine/data/eod.csv \
            --config ./etf-trading-config/operational.yaml \
            --outdir ./outputs

      - name: Backtest
        shell: bash
        run: |
          python etf-trading-engine/scripts/run_ci_backtest.py \
            --config etf-trading-config/model.yaml \
            --data etf-trading-engine/data/eod.csv \
            --outdir outputs

      - name: Walk-Forward
        shell: bash
        run: |
          python etf-trading-engine/scripts/walk_forward.py \
            --config etf-trading-config/model.yaml \
            --data etf-trading-engine/data/eod.csv \
            --windows etf-trading-config/wf_windows.yaml \
            --outdir outputs

      - name: Guardrails (with equity fallback)
        shell: bash
        run: |
          set +e
          python etf-trading-engine/scripts/guardrails.py \
            --config ./etf-trading-config/model.yaml \
            --kpis ./outputs/kpis.json \
            --wf ./outputs/wf_report.json \
            --equity ./outputs/equity_curve.csv \
            --out ./outputs/guardrails_status.json
          EXIT=$?
          cat ./outputs/guardrails_status.json || true
          if [ "$EXIT" -eq 3 ]; then
            echo "Guardrails RED -> failing pipeline"; exit 3
          elif [ "$EXIT" -eq 2 ]; then
            echo "Guardrails YELLOW -> continue"; exit 0
          else
            echo "Guardrails GREEN"; exit 0
          fi

      - name: Append & commit reports
        shell: bash
        run: |
          python etf-trading-engine/scripts/append_reports.py
          git config user.name "ci-bot"
          git config user.email "ci-bot@users.noreply.github.com"
          git add reports || true
          git commit -m "ci: append daily reports $(date -u +%F)" || true
          git pull --rebase || true
          git push || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unified-artifacts
          path: |
            outputs/**
            features/**
            etf-trading-engine/data/eod.csv
            reports/**
